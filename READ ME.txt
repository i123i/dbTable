dbTable is a lightweight and efficient SQL database file management that can store data in Tables using rows and columns.
With dbTable you can store data in files and manage it, each Table can store up to one Thousand Rows for speed and efficiency.
The data inside files is stored using pickle and encrypted using "onetimepad", you can use your own key to encrypt and decrypt data for security purposes.

======= Generate =======

from dbTable import Generate

- Generate class => creates Table metadata and inserts data in database.

== Making a Table ==

>> conn = Generate(db_path="C:\\Users\\User\\folder", db_name="my_database", table_name="my_table", encrypt_key=key,
   columns=("column-1", "column-2", etc))

> db_path=""               # Database directory path, the default path is the current directory of dbTable.
> db_name=""               # Database name, the default database name is _dbTables_
> table_name=""            # Table name.
> encrypt_key="my_key"     # encryption key, default key is default_key variable in the program.
> columns=""                # Columns (declare all the columns to create the table).

== inserting data in database ==

>> conn.insert(data=("data-1", "data-2", etc), row="row-1", columns=(column-1, column-2, etc))


> row=""      # you can enter one row at time.
> columns=""  # you can enter multiple columns at once in a tuple.
> data=""     # you can enter multiple data at once in a tuple.

warning: you need to enter the data in the same order as columns  
data=(data-1, data-2, etc) => columns=(column-1, column-2, etc) see bellow

-----------------------------------
      | column-1 |  column-2 | etc
-----------------------------------
row-1 | data-1   |  data-2   | etc


========= Extract ==========

from dbTable import Extract

- Extract class =>  find data, check data, update data, fetchall rows, fetchall columns, remove data cell,
                    remove rows, len(table rows), drop table, row_stringify json.

>> conn = Extract(db_path="C:\\Users\\User\\folder", db_name=""my_database"", table_name="my_table",
               decrypt_key=key)
               
>> conn.find(row="row-1", column="column-1")   # a method that can find data cell in row-1 and column-1,
                                                 using conn.find(row="row-1") will give you dictionary of all 
                                                 the columns and the data in row-1.

>> conn.check(row="row-1",column="column-1")    # a method that will return True if data exists False if not,
                                                  you can also use conn.check(row="row-1") to check if "row-1" exist.
                                   
>> conn.update(row="row-1", column="column-1",  # a method that can update data cell in row-1 and column-1.
               data="data-2") 

>> conn.remove(row="row-1", column="column-1")  # a method that can remove a data in cell in row-1 and column-1.

>> conn.drop_row(row="row-1")                   # a method that can remove rows.

>> conn.fetchall_columns                        # a property that will return a list of all the table's columns.

>> conn.fetchall_rows                           # a property that will return a list of all the table's rows.

>> conn.row_stringify(row="row-1", indent=2,    # using json.dumps on a dictionary of all columns and cells in row-1.
                      sort_keys=False):  

>> len(conn)                                    # returns how many rows inside a table.

>> conn.tables                                  # a property that will return a list of all tables that were created
                                                  in database.

>> conn.drop_table                              # a property that will remove the whole table from database.
